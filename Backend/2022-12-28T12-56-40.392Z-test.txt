import { LightningElement,api,wire ,track} from 'lwc';
import getContacts from '@salesforce/apex/condisplay.getContacts';
import { refreshApex } from '@salesforce/apex';
import { updateRecord } from 'lightning/uiRecordApi';

import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import FIRSTNAME_FIELD from '@salesforce/schema/Contact.FirstName';
import LASTNAME_FIELD from '@salesforce/schema/Contact.LastName';
import ID_FIELD from '@salesforce/schema/Contact.Id';


const COLS = [
    { label: 'First Name', fieldName: 'FirstName', editable: true },
    { label: 'Last Name', fieldName: 'LastName', editable: true },
  
    { label: 'Email', fieldName: 'Email', type: 'email',editable: true }
];

import insertAccountMethod from '@salesforce/apex/createcontact.insertAccountMethod'; 
export default class Con extends LightningElement {


    @api recordId;
    columns = COLS;
    draftValues = [];

    @wire(getContacts, { accId: '$recordId' })
    contact;

    handleSave(event) {

        const fields = {}; 
        fields[ID_FIELD.fieldApiName] = event.detail.draftValues[0].Id;
        fields[FIRSTNAME_FIELD.fieldApiName] = event.detail.draftValues[0].FirstName;
        fields[LASTNAME_FIELD.fieldApiName] = event.detail.draftValues[0].LastName;

        const recordInput = {fields};

        updateRecord(recordInput)
        .then(() => {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Contact updated',
                    variant: 'success'
                })
            );
            // Display fresh data in the datatable
            return refreshApex(this.contact).then(() => {

                // Clear all draft values in the datatable
                this.draftValues = [];

            });
        }).catch(error => {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error updating or reloading record',
                    message: error.body.message,
                    variant: 'error'
                })
            );
        });
    }

    //==============================================c/accouninsert
    isshow='';
    
    
    constructor() {
   
        super();
        console.log(insertAccountMethod);
        }
        
        
       
        @track keyIndex = '';
        @track getContactRecordArray=[{
            LastName:'',
            FirstName:'', 
            Email:''
            
        }]
        
      
        
        addRow(event) {

           
            this.keyIndex++
          this.isshow=true;
          this.getContactRecordArray.push({
         
            LastName:'',
            FirstName:'',
            Email:''

          });
        
          
        }
        deleteRow(event) {
            var rowIndex = event.currentTarget.dataset.index;
           
                this.getContactRecordArray.splice(rowIndex, 1);
            
        }
        
        
        nameConChange(event){
         
            if(event.target.name==='lastname')
            {
            this.getContactRecordArray[event.target.accessKey].LastName = event.target.value;
                console.log( 'last name'+ this.getContactRecordArray[event.target.accessKey].LastName);
                }
            else if(event.target.name==='firstname')
            {
                this.getContactRecordArray[event.target.accessKey].FirstName = event.target.value;
                console.log( 'first name'+ this.getContactRecordArray[event.target.accessKey].FirstName);
               
            }
            else if(event.target.name==='mail')
            {
                console.log( 'Email Event '+event.target.value);
                this.getContactRecordArray[event.target.accessKey].Email = event.target.value;
                console.log( 'Email'+this.getContactRecordArray[event.target.accessKey].Email);
               
            }
            }
      
          
        
          
        
        SaveAccountAction(){
            
        console.log('Calling Insert Method');
        
    
      
      
        var ErrorArray=[];
        let fieldErrorMsg="Please Enter the";
        this.template.querySelectorAll("lightning-input").forEach(item => {
        let fieldValue=item.value;
        let fieldLabel=item.label;  
        
        
        if(!fieldValue){
            item.setCustomValidity(fieldErrorMsg+' '+fieldLabel);
                ErrorArray.push(fieldLabel);
                console.log(ErrorArray);
            }
        else{
            item.setCustomValidity("");
        }
        item.reportValidity();
        });
        console.log(ErrorArray);
        
        
        //const Obj = Object.assign({}, this.getContactRecord);
        insertAccountMethod({conobj:this.getContactRecordArray,accid:this.recordId})
        
        .then(
        result=>{
            console.log('Success');
            console.log(result);
            this.getAccountRecord={};
            this.getContactRecordArray.forEach(function(item){
                item.FirstName= '';
                item.LastName='';
                item.Email='';
            }
        
            );
        this.accountid=result.Id;
        
        const toastEvent = new ShowToastEvent({
            title:'Success!',
            message:'Account and contacts created successfully',
            variant:'success'
            });
            this.dispatchEvent(toastEvent);
        
        })
        .catch(error=>{
            console.log(error)
        const errorevent = new ShowToastEvent({
            title:'Error!',
            message:'Please Provide the valid Details:'+ ErrorArray.join(' , '),
            variant:'error',
            mode:'dismissable'
        })
        this.dispatchEvent(errorevent) });
        console.log('It works');
        }
        
}

==================================================================================================


<template>
    <lightning-card title="Related Contacts List" icon-name="custom:custom63">
     
        <div class="slds-m-around_medium">
            <template if:true={contact.data}>
                <lightning-datatable
                    key-field="Id"
                    data={contact.data}
                    columns={columns}
                    onsave={handleSave}
                    draft-values={draftValues}
                    hide-checkbox-column>
                </lightning-datatable>
          
            </template>
        </div>
   

       
   
    <div style="background:white;color:black">
        <lightning-button variant="neutral" label="Add Row" 

  onclick={addRow} ></lightning-button>  
               <template for:each={getContactRecordArray} for:item="con" for:index="index" if:true={isshow}  >
                   <div class="slds-card__body" key={keyIndex} >               
                       <div class="slds-grid">  
                           <div class="slds-col slds-grid slds-small-size_11-of-12 
                                slds-medium-size_11-of-12 slds-large-size_11-of-12" >
                                <div class="slds-col margin-horizontal">
                                    <lightning-input type="text" placeholder="first Name" 
                                        name="firstname" access-key={index} id={index} value={con.FirstName} 
                                        label="First Name" onchange={nameConChange}  >
                                    </lightning-input>
                            
                                </div>

                               <div class="slds-col margin-horizontal">
                               
                                   <lightning-input type="text" placeholder="last Name" 
                                       name="lastname" access-key={index} id={index} value={con.LastName} 
                                       label="Last Name" onchange={nameConChange}  >
                                   </lightning-input>
                                
                               </div>
                            
                               <div class="slds-col margin-horizontal">
                                <lightning-input type="email"  placeholder="Email"  label="Email " name="mail" access-key={index} id={index} value={con.Email} 
                                 onchange={nameConChange}  >
                                
                                </lightning-input>
                            </div>
                        </div>

                               <div class="slds-col slds-grid slds-small-size_1-of-12 
                               slds-medium-size_1-of-12 slds-large-size_1-of-12 action-btn "> 
                               <lightning-button-icon icon-name="utility:delete" size="medium" 
                                   class="btnDelete" variant="border-filled" 
                                   access-key={index} id={index} alternative-text="Delete"     
                                   onclick={deleteRow}>
                               </lightning-button-icon>
                           </div>  
                       
                           </div>
                     
                             
                       </div>  
       
                  
              
              </template>
                <!-- Add Row Button -->
         
               
        
        
           
           <lightning-button variant="brand"  name="save" label="Create Account" onclick={SaveAccountAction}></lightning-button>
        
           
           
      
        </div>
         </lightning-card>
</template>